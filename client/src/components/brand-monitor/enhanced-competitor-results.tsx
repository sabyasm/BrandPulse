import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { Crown, TrendingUp, Users, Plus, Minus, CheckCircle, XCircle, Lightbulb, Star, AlertCircle, Copy, ChevronDown } from "lucide-react";
import type { BrandAnalysis } from "@shared/schema";
import { useState } from "react";

interface EnhancedCompetitorResultsProps {
  analysis: BrandAnalysis;
}

export default function EnhancedCompetitorResults({ analysis }: EnhancedCompetitorResultsProps) {
  const { results } = analysis;
  
  if (!results?.aggregatedAnalysis) {
    console.log('No aggregated analysis found in results:', results);
    return null;
  }

  const { aggregatedAnalysis, enhancedPrompt } = results;
  console.log('Enhanced results data:', { 
    brands: aggregatedAnalysis.reportByBrand?.length || 0, 
    providers: aggregatedAnalysis.reportByProvider?.length || 0 
  });

  const handleCopyPrompt = () => {
    if (enhancedPrompt) {
      navigator.clipboard.writeText(enhancedPrompt);
    }
  };

  return (
    <div className="space-y-8">
      {/* Enhanced Prompt Display */}
      {enhancedPrompt && (
        <Card>
          <CardHeader>
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                <Lightbulb className="w-5 h-5 text-purple-600" />
              </div>
              <div>
                <CardTitle className="text-lg">Enhanced Prompt Analysis</CardTitle>
                <p className="text-sm text-gray-600">Generated by GPT-4.1 for structured brand evaluation</p>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-50 rounded-lg p-4 relative">
              <div className="flex justify-between items-start">
                <p className="text-sm text-gray-700 leading-relaxed pr-8">{enhancedPrompt.substring(0, 300)}...</p>
                <button
                  onClick={handleCopyPrompt}
                  className="absolute top-3 right-3 p-1 text-gray-400 hover:text-gray-600 transition-colors"
                  title="Copy enhanced prompt"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Main Report Views */}
      <Tabs defaultValue="by-brand" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="by-brand">Report by Brand</TabsTrigger>
          <TabsTrigger value="by-provider">Report by AI Provider</TabsTrigger>
        </TabsList>

        {/* Report by Brand */}
        <TabsContent value="by-brand" className="space-y-6 mt-6">
          <Card>
            <CardHeader>
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                  <Users className="w-5 h-5 text-blue-600" />
                </div>
                <div>
                  <CardTitle className="text-lg">Brand Analysis Summary</CardTitle>
                  <p className="text-sm text-gray-600">What AI providers think about each brand</p>
                </div>
              </div>
            </CardHeader>
          </Card>

          {aggregatedAnalysis.reportByBrand && aggregatedAnalysis.reportByBrand.length > 0 ? (
            aggregatedAnalysis.reportByBrand.map((brandReport, index) => (
              <Card key={index} className="overflow-hidden">
                <CardHeader className="pb-4">
                  <div className="flex items-center justify-between">
                    <h3 className="text-xl font-semibold text-gray-900">{brandReport.brandName}</h3>
                    <div className="flex items-center space-x-2">
                      <Star className="w-5 h-5 text-yellow-500" />
                      <Badge variant="secondary" className="bg-blue-100 text-blue-700">
                        Rank #{brandReport.overallRanking}
                      </Badge>
                    </div>
                  </div>
                </CardHeader>

                <CardContent className="space-y-6">
                  {/* AI Providers Think Section */}
                  <div>
                    <h4 className="text-lg font-medium text-gray-900 mb-4">AI Providers say</h4>
                    <p className="text-gray-700 mb-4">
                      {brandReport.aiProvidersThink.positiveAspects.length > 0 
                        ? `${brandReport.aiProvidersThink.positiveAspects.slice(0, 2).join(' and ')}.`
                        : ''
                      } {brandReport.aiProvidersThink.negativeAspects.length > 0 
                        ? `However, concerns noted about ${brandReport.aiProvidersThink.negativeAspects.slice(0, 2).join(' and ')}.`
                        : ''
                      } {brandReport.providerInsights.length > 1 
                        ? `Multiple providers evaluated this brand with varying rankings.`
                        : 'Single provider analysis available.'
                      }
                    </p>
                    <p className="text-xs text-gray-500 mb-4">Generated from the analysis of AI provider responses</p>

                    <div className="mb-4">
                      <p className="text-sm font-medium text-gray-900 mb-2">Key aspects mentioned</p>
                      <div className="flex flex-wrap gap-2">
                        {brandReport.aiProvidersThink.positiveAspects.map((positive, idx) => (
                          <Badge key={idx} variant="outline" className="text-green-600 border-green-200 bg-green-50">
                            <CheckCircle className="w-3 h-3 mr-1" />
                            {positive}
                          </Badge>
                        ))}
                        {brandReport.aiProvidersThink.negativeAspects.slice(0, 3).map((negative, idx) => (
                          <Badge key={idx} variant="outline" className="text-orange-600 border-orange-200 bg-orange-50">
                            <XCircle className="w-3 h-3 mr-1" />
                            {negative}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>

                  {/* Provider Insights Breakdown */}
                  <div className="border-t pt-4">
                    <Collapsible defaultOpen={false}>
                      <CollapsibleTrigger className="flex items-center justify-between w-full hover:bg-gray-50 rounded-lg p-2 -m-2">
                        <h4 className="text-sm font-medium text-gray-900">Provider Rankings & Insights</h4>
                        <ChevronDown className="w-4 h-4 text-gray-500" />
                      </CollapsibleTrigger>
                      <CollapsibleContent className="mt-3">
                        <div className="grid gap-3">
                          {brandReport.providerInsights.map((insight, idx) => (
                            <div key={idx} className="border border-gray-200 rounded-lg p-4">
                              <div className="flex items-center justify-between mb-2">
                                <Badge variant="outline" className="bg-blue-50 text-blue-700">
                                  {insight.provider}
                                </Badge>
                                <Badge variant="secondary" className="bg-gray-100 text-gray-700">
                                  Rank #{insight.ranking}
                                </Badge>
                              </div>
                              
                              <div className="grid md:grid-cols-2 gap-3">
                                {insight.positives.length > 0 && (
                                  <div className="space-y-1">
                                    <div className="flex items-center space-x-2 text-sm font-medium text-green-700">
                                      <Plus className="w-4 h-4" />
                                      <span>Strengths</span>
                                    </div>
                                    <ul className="text-sm text-gray-600 space-y-1">
                                      {insight.positives.map((positive, i) => (
                                        <li key={i} className="flex items-start space-x-2">
                                          <div className="w-1.5 h-1.5 bg-green-500 rounded-full mt-2 flex-shrink-0" />
                                          <span>{positive}</span>
                                        </li>
                                      ))}
                                    </ul>
                                  </div>
                                )}
                                
                                {insight.negatives.length > 0 && (
                                  <div className="space-y-1">
                                    <div className="flex items-center space-x-2 text-sm font-medium text-orange-700">
                                      <Minus className="w-4 h-4" />
                                      <span>Considerations</span>
                                    </div>
                                    <ul className="text-sm text-gray-600 space-y-1">
                                      {insight.negatives.map((negative, i) => (
                                        <li key={i} className="flex items-start space-x-2">
                                          <div className="w-1.5 h-1.5 bg-orange-500 rounded-full mt-2 flex-shrink-0" />
                                          <span>{negative}</span>
                                        </li>
                                      ))}
                                    </ul>
                                  </div>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      </CollapsibleContent>
                    </Collapsible>
                  </div>
                </CardContent>
              </Card>
            ))
          ) : (
            <Card>
              <CardContent className="p-6 text-center">
                <div className="flex items-center justify-center mb-4">
                  <AlertCircle className="w-8 h-8 text-gray-400" />
                </div>
                <p className="text-gray-500 mb-2">No brand analysis data available</p>
                <p className="text-sm text-gray-400">The analysis may still be processing or there was an issue with data aggregation.</p>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* Report by Provider */}
        <TabsContent value="by-provider" className="space-y-6 mt-6">
          <Card>
            <CardHeader>
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                  <TrendingUp className="w-5 h-5 text-purple-600" />
                </div>
                <div>
                  <CardTitle className="text-lg">AI Provider Rankings</CardTitle>
                  <p className="text-sm text-gray-600">How each AI model ranks and evaluates brands</p>
                </div>
              </div>
            </CardHeader>
          </Card>

          {aggregatedAnalysis.reportByProvider && aggregatedAnalysis.reportByProvider.length > 0 ? (
            aggregatedAnalysis.reportByProvider.map((providerReport, index) => (
              <Card key={index}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <h3 className="text-xl font-semibold text-gray-900">{providerReport.provider}</h3>
                    <Badge variant="outline" className="bg-purple-50 text-purple-700">
                      {providerReport.brandRankings.length} brands evaluated
                    </Badge>
                  </div>
                </CardHeader>

                <CardContent>
                  <div className="space-y-4">
                    {providerReport.brandRankings.map((brand, idx) => (
                      <div key={idx} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center space-x-3">
                            <Badge variant="secondary" className="bg-blue-100 text-blue-700">
                              #{brand.ranking}
                            </Badge>
                            <h4 className="font-medium text-gray-900">{brand.name}</h4>
                          </div>
                          <Crown className="w-5 h-5 text-yellow-500" />
                        </div>

                        <div className="grid md:grid-cols-2 gap-4">
                          {brand.positives.length > 0 && (
                            <div className="space-y-2">
                              <div className="flex items-center space-x-2 text-sm font-medium text-green-700">
                                <Plus className="w-4 h-4" />
                                <span>Why {providerReport.provider} likes it</span>
                              </div>
                              <ul className="text-sm text-gray-600 space-y-1">
                                {brand.positives.map((positive, i) => (
                                  <li key={i} className="flex items-start space-x-2">
                                    <CheckCircle className="w-3 h-3 text-green-500 mt-0.5 flex-shrink-0" />
                                    <span>{positive}</span>
                                  </li>
                                ))}
                              </ul>
                            </div>
                          )}

                          {brand.negatives.length > 0 && (
                            <div className="space-y-2">
                              <div className="flex items-center space-x-2 text-sm font-medium text-orange-700">
                                <Minus className="w-4 h-4" />
                                <span>Potential concerns</span>
                              </div>
                              <ul className="text-sm text-gray-600 space-y-1">
                                {brand.negatives.map((negative, i) => (
                                  <li key={i} className="flex items-start space-x-2">
                                    <XCircle className="w-3 h-3 text-orange-500 mt-0.5 flex-shrink-0" />
                                    <span>{negative}</span>
                                  </li>
                                ))}
                              </ul>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))
          ) : (
            <Card>
              <CardContent className="p-6 text-center">
                <div className="flex items-center justify-center mb-4">
                  <AlertCircle className="w-8 h-8 text-gray-400" />
                </div>
                <p className="text-gray-500 mb-2">No provider rankings available</p>
                <p className="text-sm text-gray-400">The analysis may still be processing or there was an issue with data aggregation.</p>
              </CardContent>
            </Card>
          )}
        </TabsContent>
      </Tabs>
    </div>
  );
}